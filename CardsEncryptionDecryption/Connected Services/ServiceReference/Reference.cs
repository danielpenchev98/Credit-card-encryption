//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CardsEncryptionDecryption.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.ILogin")]
    public interface ILogin {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogin/LogIn", ReplyAction="http://tempuri.org/ILogin/LogInResponse")]
        string LogIn(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogin/LogIn", ReplyAction="http://tempuri.org/ILogin/LogInResponse")]
        System.Threading.Tasks.Task<string> LogInAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogin/Register", ReplyAction="http://tempuri.org/ILogin/RegisterResponse")]
        bool Register(string username, string password, string[] access);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogin/Register", ReplyAction="http://tempuri.org/ILogin/RegisterResponse")]
        System.Threading.Tasks.Task<bool> RegisterAsync(string username, string password, string[] access);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogin/LogOff", ReplyAction="http://tempuri.org/ILogin/LogOffResponse")]
        bool LogOff(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogin/LogOff", ReplyAction="http://tempuri.org/ILogin/LogOffResponse")]
        System.Threading.Tasks.Task<bool> LogOffAsync(string sessionId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILoginChannel : CardsEncryptionDecryption.ServiceReference.ILogin, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginClient : System.ServiceModel.ClientBase<CardsEncryptionDecryption.ServiceReference.ILogin>, CardsEncryptionDecryption.ServiceReference.ILogin {
        
        public LoginClient() {
        }
        
        public LoginClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LoginClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoginClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoginClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string LogIn(string username, string password) {
            return base.Channel.LogIn(username, password);
        }
        
        public System.Threading.Tasks.Task<string> LogInAsync(string username, string password) {
            return base.Channel.LogInAsync(username, password);
        }
        
        public bool Register(string username, string password, string[] access) {
            return base.Channel.Register(username, password, access);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAsync(string username, string password, string[] access) {
            return base.Channel.RegisterAsync(username, password, access);
        }
        
        public bool LogOff(string sessionId) {
            return base.Channel.LogOff(sessionId);
        }
        
        public System.Threading.Tasks.Task<bool> LogOffAsync(string sessionId) {
            return base.Channel.LogOffAsync(sessionId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IEncryptDecrypt")]
    public interface IEncryptDecrypt {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEncryptDecrypt/Encrypt", ReplyAction="http://tempuri.org/IEncryptDecrypt/EncryptResponse")]
        string Encrypt(string sessionId, string cardNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEncryptDecrypt/Encrypt", ReplyAction="http://tempuri.org/IEncryptDecrypt/EncryptResponse")]
        System.Threading.Tasks.Task<string> EncryptAsync(string sessionId, string cardNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEncryptDecrypt/Decrypt", ReplyAction="http://tempuri.org/IEncryptDecrypt/DecryptResponse")]
        string Decrypt(string sessionId, string encrNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEncryptDecrypt/Decrypt", ReplyAction="http://tempuri.org/IEncryptDecrypt/DecryptResponse")]
        System.Threading.Tasks.Task<string> DecryptAsync(string sessionId, string encrNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEncryptDecrypt/CreateTextFileWithEncryptedNumbersAndTheirCard" +
            "Numbers", ReplyAction="http://tempuri.org/IEncryptDecrypt/CreateTextFileWithEncryptedNumbersAndTheirCard" +
            "NumbersResponse")]
        bool CreateTextFileWithEncryptedNumbersAndTheirCardNumbers(string sessionId, string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEncryptDecrypt/CreateTextFileWithEncryptedNumbersAndTheirCard" +
            "Numbers", ReplyAction="http://tempuri.org/IEncryptDecrypt/CreateTextFileWithEncryptedNumbersAndTheirCard" +
            "NumbersResponse")]
        System.Threading.Tasks.Task<bool> CreateTextFileWithEncryptedNumbersAndTheirCardNumbersAsync(string sessionId, string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEncryptDecrypt/CreateTextFileWithCardNumbersAndTheirEncrypted" +
            "Numbers", ReplyAction="http://tempuri.org/IEncryptDecrypt/CreateTextFileWithCardNumbersAndTheirEncrypted" +
            "NumbersResponse")]
        bool CreateTextFileWithCardNumbersAndTheirEncryptedNumbers(string sessionId, string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEncryptDecrypt/CreateTextFileWithCardNumbersAndTheirEncrypted" +
            "Numbers", ReplyAction="http://tempuri.org/IEncryptDecrypt/CreateTextFileWithCardNumbersAndTheirEncrypted" +
            "NumbersResponse")]
        System.Threading.Tasks.Task<bool> CreateTextFileWithCardNumbersAndTheirEncryptedNumbersAsync(string sessionId, string filename);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEncryptDecryptChannel : CardsEncryptionDecryption.ServiceReference.IEncryptDecrypt, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EncryptDecryptClient : System.ServiceModel.ClientBase<CardsEncryptionDecryption.ServiceReference.IEncryptDecrypt>, CardsEncryptionDecryption.ServiceReference.IEncryptDecrypt {
        
        public EncryptDecryptClient() {
        }
        
        public EncryptDecryptClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EncryptDecryptClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EncryptDecryptClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EncryptDecryptClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Encrypt(string sessionId, string cardNumber) {
            return base.Channel.Encrypt(sessionId, cardNumber);
        }
        
        public System.Threading.Tasks.Task<string> EncryptAsync(string sessionId, string cardNumber) {
            return base.Channel.EncryptAsync(sessionId, cardNumber);
        }
        
        public string Decrypt(string sessionId, string encrNumber) {
            return base.Channel.Decrypt(sessionId, encrNumber);
        }
        
        public System.Threading.Tasks.Task<string> DecryptAsync(string sessionId, string encrNumber) {
            return base.Channel.DecryptAsync(sessionId, encrNumber);
        }
        
        public bool CreateTextFileWithEncryptedNumbersAndTheirCardNumbers(string sessionId, string filename) {
            return base.Channel.CreateTextFileWithEncryptedNumbersAndTheirCardNumbers(sessionId, filename);
        }
        
        public System.Threading.Tasks.Task<bool> CreateTextFileWithEncryptedNumbersAndTheirCardNumbersAsync(string sessionId, string filename) {
            return base.Channel.CreateTextFileWithEncryptedNumbersAndTheirCardNumbersAsync(sessionId, filename);
        }
        
        public bool CreateTextFileWithCardNumbersAndTheirEncryptedNumbers(string sessionId, string filename) {
            return base.Channel.CreateTextFileWithCardNumbersAndTheirEncryptedNumbers(sessionId, filename);
        }
        
        public System.Threading.Tasks.Task<bool> CreateTextFileWithCardNumbersAndTheirEncryptedNumbersAsync(string sessionId, string filename) {
            return base.Channel.CreateTextFileWithCardNumbersAndTheirEncryptedNumbersAsync(sessionId, filename);
        }
    }
}
